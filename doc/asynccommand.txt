*asynccommand.txt*	Run commands without waiting.

==============================================================================

                                                                *asynccommand*
Introduction~

AsyncCommand allows you to execute shell commands without waiting for them 
to complete. When the application terminates, its output can be loaded into 
a vim buffer.

You can define your own commands by following the same format:
Define a launch function that passes the external command and result handler
(like asynchandler#quickfix) to asynccommand#run. You can use the handlers in
autoload/asynchandler.vim or define your own.

						   *asynccommand-requirements*
AsyncCommand Requirements~

AsyncCommand needs vim compiled with |+clientserver|. Check your vim version
with |:version|. Vim must have a |v:servername| (see |--servername|). On unix,
an X11 server is required to use |+clientserver|. See |x11-clientserver| and
|w32-clientserver|.

						       *asynccommand-commands*
Commands~

:AsyncPending					               *:AsyncPending*
                Open the preview window with a listing of the output files for
                the currently active asynccommands. Run again to refresh the
                listing. Commands like AsyncCommand that don't have a
                completion handler are not included.

:AsyncCommand {cmd}					       *:AsyncCommand*
		Execute shell {cmd} in the background.

:AsyncShell {cmd}					         *:AsyncShell*
                Execute shell {cmd} in the background. When it completes, open
                the result in a split window.
                Completes shell commands.

:AsyncGrep [arguments]                                            *:AsyncGrep*
                Run a grep command in the background using 'grepprg'. On
                completion, the results are loaded in the quickfix. The window
                is titled with the query.
                Completes filenames.

:AsyncMake [arguments]                                            *:AsyncMake*
                Run a build in the background using 'makeprg'. On completion,
                the build output is loaded in the quickfix. The window is
                titled with the build target.

:AsyncCscopeFindX {querytype} {name}                       *:AsyncCscopeFindX*
                Run a cscope search in the background using 'cscopeprg'. On
                completion, the results are loaded in the quickfix. The window
                is titled with the query.
                Usage is the same as the |cscope-find| command: Expects the
                character describing the query type and the query name. For
                example, to search for the functions called by main():
>
    :AsyncCscopeFindX d main
<
                Completes tags.

:AsyncCscopeFindSymbol {name}                         *:AsyncCscopeFindSymbol*
                Same as AsyncCscopeFindSymbol but automatically prepends 's'.
                Just expects a symbol name.

:AsyncCscopeFindCalls {name}                           *:AsyncCscopeFindCalls*
                Same as AsyncCscopeFindSymbol but automatically prepends 'c'.
                Just expects a function name.

						      *asynccommand-functions*
Functions~

asynccommand#run({command} [, {function}[, {dict}]])        *asynccommand#run*
		Execute a shell {command} in the background.
		After the command is executed {function} can will be called.
		{function} can be either:
		|Funcref|
			A Function ref
		|Dictionary|
			A dictionary with a |Dictionary-function| named key
			named 'get'.

		The {dict} argument can be supplied to be used to call with
		the {function}. This the same as using the third argument to
		|call()|.

		The {function} will be of the following form:
		some_function(temp_name)

		temp_name will be the name of temporary file used to capture
		the output of the {command}.

		Examples: >

		command! GenerateCscopeFiles call GenerateCscopeFiles()
		function! GenerateCscopeFiles()
		    let cmd = 'find . -name "*.java"'
		    let env = asynchandler#rename('cscope.files')
		    call asynccommand#run(cmd, env)
		endfunction

		command! -nargs=+ Ack call AckFunc(<q-args>)
		function! AckFunc(query)
		    let cmd = 'ack -H --nocolor --nogroup --column '
		    let cmd .= a:query
		    let efm = "%f:%l:%c:%m"
		    let title = "[Found: %s] Ack"
		    let env = asynchandler#quickfix(efm, title)
		    call asynccommand#run(cmd, env)
		endfunction

		command! -nargs=1 AntBuild call AntBuildFunc(<q-args>)
		function! AntBuildFunc(target)
		    let cmd = 'ant '
		    let cmd .= a:target
		    let env = {}
		    function env.get(temp_file) dict
		        let h = ''
		        if self.return_code == 0
		            " use tiny split window height on success
		            let h = 1
		        endif
		        " open the file in a split
		        exec h . "split " . a:temp_file
		        " remove boring build output
		        %s/^\[xslt\].*$/
		        " go back to the previous window
		        wincmd p
		    endfunction

		    " tab_restore prevents interruption when the task completes.
		    " All provided asynchandlers already use tab_restore.
		    call asynccommand#run(cmd, asynccommand#tab_restore(env))
		endfunction
<

                             *asynccommand-callbacks* *asynccommand-handlers*
Common Callbacks~

asynchandler#rename({path})                             *asynchandler#rename*
		Rename the temp_file to {path} after the background command
		has been executed.

asynchandler#quickfix({errorformat}, {title})         *asynchandler#quickfix*
		Open the results in |quickfix-window| using {errorformat} as
		the 'errorformat'. A {title} can be provided to give the
		quickfix-window, similar to |w:quickfix_title|. Put %s into
		the {title} to have it replaced with the number of results.

asynchandler#quickfix_add({errorformat}, {title}) *asynchandler#quickfix_add*
		Same as |asynchandler#quickfix| but results will be added.

asynchandler#loclist({errorformat}, {title})           *asynchandler#loclist*
		Same as |asynchandler#quickfix| but use the |location-list|.

asynchandler#loclist_add({errorformat}, {title})   *asynchandler#loclist_add*
		Same as |asynchandler#quickfix_add| but use the
		|location-list|.

asynchandler#split(is_const_preview)                     *asynchandler#split*
		Open the results of the asynchronous shell command in a new
		split. Pass is_const_preview=1 to setup buffer as immutable
		preview window. It will have q mapped to close.

==============================================================================

						  *asynccommand-configuration*
Configuration~

g:asynccommand_prg                                        *g:asynccommand_prg*
		Override the default path to vim to be used by AsyncCommand to
		capture data from backgrounded commands.  AsyncCommand is
		compatible with |macvim| and will use mvim if it is available.
		See |mvim| for setup.

statusline                                           *asynccommand-statusline*
                Add %{asynccommand#statusline()} to your 'statusline' to show
                the pending command count.

g:asynccommand_statusline                          *g:asynccommand_statusline*
                Default: 'Pending:%d'
                A |printf| format string that defines how to display the
                number of commands running in the background for
                |asynccommand-statusline|. Must include a "%d" where you want
                the count of pending commands.

g:asynccommand_statusline_autohide        *g:asynccommand_statusline_autohide*
                Default: 0
                When enabled, uses no text for |asynccommand-statusline| when
                there are no pending commands. May look strange if your
                'statusline' adds separators between segments (e.g., the
                |Powerline| plugin).

shellredir                                           *asynccommand-shellredir*
		You may find it useful to change vim's |shellredir| setting to
		use tee (which writes to a file, but also to stdout). On
		MS-Windows, this will allow you to see the output of the
		command in the opened command window.
>
		" redirect to both standard output and files
		set shellredir=2>&1\|tee\ %s
<


==============================================================================

 vim:tw=78:ts=8:ft=help:norl:
